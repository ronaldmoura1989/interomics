---
title: "InterOmics App: Integration Scripts"
author: "Brandao et al."
date: last-modified
date-format: "[Last updated on:] DD-MM-YYYY"
#format: html
format: markdown_github
editor: visual
code-fold: true
---

## Description

InterOmics is a multiOmic App to integrate, in biological terms, Omics data. In this section, we InterOmics describe a R script to Genomic and Transcriptome sourced from Next-sequence generation

## Install and Requirements

1)  You need to have previously processed both WES and RNAseq data in csv format. The header of files must to have:

-   sample: the sample id omics: exome or rnaseq.

-   genotype: e.g. het or hom.

-   Chr: the chromosome number (e.g. chr1).

-   Start: start base position of the variant.

-   End: end base position of the variant Ref: reference allele (e.g. A).

-   Alt: alternative allele (e.g. C).

-   Gene.refGene: the gene symbol (e.g. MBL2).

-   Func.refGene: the location of the variant in the gene (e.g. exonic, upstream).

-   ExonicFunc.refGene: the consequence of the varition (e.g., nonsynonymous SNV).

-   AF: GnomAD global allele frequency.

-   avsnp154: dbSNP 154 identifier.

-   QUAL: base quality score of the variant (e.g., 50).

-   INFO_DP: depth of the variant (e.g., 142).

-   ref.count: expression value (in TPM) for the gene, according to GTeX database.

-   count: expression value (in TPM) for the gene in the sample.

2.  R version 4.4.2+ (<https://www.r-project.org>).

3.  the package [tidyverse v.2.0.0](https://www.tidyverse.org/).

## Usage of InterOmics:

### Read files in R:

We present an object called *multiomics_individual_data* with an ideal input for the R commands that follows. In order to execute de commands,

```{r, warning=FALSE, message=FALSE}

library(tidyverse)
multiomics_individual_data = data.table::fread("multiomics_individual_data.zip")

```

### Acessing ASE variants

Allele Specific Expression (ASE) variants can be retrieved from the dataset using the command:

```{r, warning=FALSE, message=FALSE}

ase = multiomics_individual_data %>% 
  group_by(sample, avsnp154) %>%
  filter(n_distinct(omics) == 2) %>%
  filter(any(omics == "exome" & genotype == "het") & 
         any(omics == "rnaseq" & genotype == "hom")) %>%
  ungroup() %>% 
  filter(Chr %in% c(paste0("chr", seq(1,22)), "chrX", "chrY")) %>% 
  filter(omics == "rnaseq") %>% 
  select(Chr:Gene.refGene, ExonicFunc.refGene, AF,
         avsnp154:counts) %>%
  filter(!Func.refGene %in% c("intronic", "intergenic", "upstream",
                              "downstream")) %>%
  filter(ExonicFunc.refGene != "synonymous SNV") %>%
  filter(AF < 0.01 | is.na(AF) == TRUE) %>%
  distinct(avsnp154, sample, .keep_all = TRUE)

```

### Acessing RNAe variants

RNA edited variants, i.e., those that have changed during the mRNA processing stage, can be found by using the command:

```{r, warning=FALSE, message=FALSE}

rna_e = multiomics_individual_data %>%
  group_by(sample, avsnp154) %>%
  filter(n_distinct(omics) == 2) %>%
  filter(any(omics == "exome" & genotype == "hom") & 
         any(omics == "rnaseq" & genotype == "het")) %>%
  ungroup() %>% 
  filter(Chr %in% c(paste0("chr", seq(1,22)), "chrX", "chrY")) %>% 
  filter(omics == "rnaseq") %>% 
  select(Chr:Gene.refGene, ExonicFunc.refGene, AF, 
         avsnp154:counts) %>% 
  filter(!Func.refGene %in% c("intronic", "intergenic", "upstream",
                              "downstream")) %>%
  filter(ExonicFunc.refGene != "synonymous SNV") %>%
  filter(AF < 0.01 | is.na(AF) == TRUE) %>%
  distinct(avsnp154, sample, .keep_all = TRUE)

```

### Acessing NMD variants

Nonsense-mediated messenger RNA (mRNA) decay (NMD) can be seen using this command line:

```{r, warning=FALSE, message=FALSE}

nmd = multiomics_individual_data %>% 
  filter(Chr %in% c(paste0("chr", seq(1,22)), "chrX", "chrY")) %>% 
  filter(omics == "exome") %>% 
  select(Chr:Gene.refGene, ExonicFunc.refGene, AF, 
         avsnp154:counts) %>% 
  filter(grepl("stop|start|^frameshift", ExonicFunc.refGene) == TRUE) %>% 
  # filter(AF < 0.01 | is.na(AF) == TRUE) %>%
  mutate_at(.vars = c("ref.count", "counts"),
            .funs = ~ if_else(is.na(.x), 0, .x)) %>% 
  mutate(ref.count_categ = case_when(ref.count <  0.5 ~ "below cutoff",
                                     ref.count > 0.5 & ref.count <= 10   ~ "low",
                                     ref.count > 10  & ref.count <= 1000 ~ "medium",
                                     ref.count > 1000 ~ "high"
                                     )) %>% 
  mutate(counts_categ = case_when(counts <  0.5 ~ "below cutoff",
                                  counts > 0.5 & counts <= 10   ~ "low",
                                  counts > 10  & counts <= 1000 ~ "medium",
                                  counts > 1000 ~ "high"
  )) %>%
  mutate(ref.count_categ = fct_relevel(ref.count_categ, 
                                    c("below cutoff", "low",
                                      "medium", "high"))) %>% 
  mutate(counts_categ = fct_relevel(counts_categ, 
                                    c("below cutoff", "low",
                                      "medium", "high"))) %>% 
  filter(counts_categ %in% c("below cutoff", "low")) %>% 
  filter(ref.count_categ %in% c("medium", "high")) 

```

### Acessing Gain of Function (GoF) variants

GoF mutations can be fetched using this command:

```{r, warning=FALSE, message=FALSE}

gof = multiomics_individual_data %>% 
  filter(Chr %in% c(paste0("chr", seq(1,22)), "chrX", "chrY")) %>% 
  filter(omics == "exome") %>% 
  select(Chr:Gene.refGene, ExonicFunc.refGene, AF, 
         avsnp154:counts) %>% 
  filter(!Func.refGene %in% c("ncRNA_intronic", "intronic", "intergenic")) %>%
  filter(grepl("synonymous SNV|^start|^stop|^frameshift|unknown", 
               ExonicFunc.refGene) == FALSE) %>%
  filter(AF < 0.01 | is.na(AF) == TRUE) %>%
  mutate_at(.vars = c("ref.count", "counts"),
            .funs = ~ if_else(is.na(.x), 0, .x)) %>% 
  mutate(ref.count_categ = case_when(ref.count <  0.5 ~ "below cutoff",
                                     ref.count > 0.5 & ref.count <= 10   ~ "low",
                                     ref.count > 10  & ref.count <= 1000 ~ "medium",
                                     ref.count > 1000 ~ "high"
  )) %>% 
  mutate(counts_categ = case_when(counts <  0.5 ~ "below cutoff",
                                  counts > 0.5 & counts <= 10   ~ "low",
                                  counts > 10  & counts <= 1000 ~ "medium",
                                  counts > 1000 ~ "high"
  )) %>%
  mutate(ref.count_categ = fct_relevel(ref.count_categ, 
                                       c("below cutoff", "low",
                                         "medium", "high"))) %>% 
  mutate(counts_categ = fct_relevel(counts_categ, 
                                    c("below cutoff", "low",
                                      "medium", "high"))) %>% 
  filter(counts_categ %in% c("medium", "high")) %>% 
  filter(ref.count_categ %in% c("below cutoff", "low"))

```

### Generate tables

To export the tables, we can iterate a function to create .tsv files that can be easily read by and spreadsheet software.

```{r, warning=FALSE, message=FALSE}

for(i in c("ase", "gof", "nmd", "rna_e")){
  write.table(get(i), 
            file = paste0(i, ".tsv"), 
            sep = "\t", 
            col.names = TRUE, 
            row.names = FALSE, 
            quote = FALSE)
}

```
